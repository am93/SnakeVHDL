			CONSTANT delay_1us_constant	, 0B

			
			ADDRESS 000			; program se vedno zacne na naslovu 0
			
			ENABLE INTERRUPT	; omogocimo prekinitve
			
start:      CALL clear			; pobrisemo zaslon
			LOAD s3, 0A 		; row
			LOAD s4, 0D 		; column
			LOAD s5, 04 		; snake length
			LOAD s6, 01 		; constant 1
			LOAD s7, 00 		; constant 0
			LOAD s8, 00 		; scratchpad offset
			LOAD sC, 1C 		; sc -> kaca zacne v desno
			LOAD sE, 25			; food row
			LOAD sF, C6 		; food column
			
			OUTPUT s7, 04		; signal za reset LEDic na 0
			OUTPUT sE, 00		; hrana v VHDL 
			OUTPUT sF, 01		; hrana v VHDL
			OUTPUT s6, 02		; barva hrane v VHDL
			
			LOAD s5, 04			; dolzina kace
			LOAD s9, s5			; kopija dolzine kace za stevec
			
init:		SUB s4, 01			; zmanjsaj stolpec
			STORE s3, (s8)		; shrani vrstico
			ADD s8, 01			; povecaj offset
			STORE s4, (s8)		; shrani stolpec
			ADD s8, 01			; povecaj offset
			
			OUTPUT s4, 01		; stolpec v VHDL
			OUTPUT	s3, 00		; vrstica v VHDL
			LOAD s6, 02			; vrednost binarna 10 za barvo kace			
			OUTPUT s6, 02		; barva kace v VHDL
			SUB s9, 01			; zmanjsaj stevec dolzine kace
			COMPARE s9, 00		; preveri ce je stevec 0
			JUMP NZ, init		; ponovi ce stevec != 0
			LOAD s6, 01			; popravimo vrednost s6
			
			


main:       
			;if pojemo hrano
			FETCH s3, 02		; pridobi vrstico 
			FETCH s4, 03		; pridobi stolpec
			LOAD sA, sE			; vrstica hrane
			AND sA, 1F			; vzemi spodnjih 5 bitov
			COMPARE s3, sA		; preveri ce je na isti vrstici kot hrana
			JUMP NZ, move		; ce ni, naredi premik
			
			LOAD sA, sF			; stolpec hrane
			AND sA, 3F			; vzemi spodnjih 6 bitov
			COMPARE s4, sA		; preveri ce je v istem stolpcu kot hrana
			JUMP NZ, move		; ce ni, naredi premik
			
			LOAD s9, s5			; nalozi dolzino kace
			SL0 s9				; dolzino pomnoziva z 2 
			SUB s9, 01			; zmanjsaj za 1
			LOAD s8, s9			; shrani odmik
			ADD s8, 02			; povecaj odmik za 2
			ADD s5, 01			; povecaj dolzino za 1
			CALL lfsr			; poklici lfsr
			JUMP move_body		; premakni telo

move:		
			LOAD s8, s5			; nalozi dolzino
			SL0 s8				; pomnozi z 2

			;remove tail
			SUB s8, 01			; zmanjsaj odmik za 1		
			FETCH s4, (s8)		; pridobi stolpec
			SUB s8, 01			; zmanjsaj odmik za 1
			FETCH s3, (s8)		; pridobi vrstico
			
			OUTPUT s3, 00		; vrstica v VHDL
			OUTPUT s4, 01		; stolpec v VHDL
			OUTPUT s7, 02		; postavi piksel na 0 (VHDL)
			
			LOAD s8, s5			; nalozi dolzino
			SL0 s8				; pomnozi s 2
			SUB s8, 01			; zmanjsaj za 1
			LOAD s9, s8			; shrani v s9	
			SUB s9, 02			; zmanjsaj za 2

move_body:
			FETCH s4, (s9)		; pridobi stolpec
			SUB s9, 01			; zmanjsaj odmik
			FETCH s3, (s9)		; pridobi vrstico
			SUB s9, 01			; zmanjsaj odmik
			
			STORE s4, (s8)		; shrani stolpec na nov odmik
			SUB s8, 01			; zmanjsaj za 1
			STORE s3, (s8)		; shrani vrstico na nov odmik
			SUB s8, 01			; zmanjsaj za 1
			
			OUTPUT s3, 00		; vrstica v VHDL
			OUTPUT s4, 01		; stolpec v VHDL
			LOAD s6, 02			; vrednost binarna 10 za barvo kace
			OUTPUT s6, 02		; piksel na 1 v VHDL

			COMPARE s8, 01		; primerjaj z ena
			JUMP NZ, move_body	; ponovi ce ni enak 1
			LOAD s6, 01			; popravimo s6 nazaj na 1
			
			
			FETCH s3, 00		; vrstica glave
			FETCH s4, 01		; stolpec glave
			

			
			COMPARE sC, 1B		; preveri scan kodo -> dol
			JUMP Z, movedown 

			COMPARE sC, 1C		; preveri scan kodo -> levo
			JUMP Z, moveleft
				
			COMPARE sC, 1D		; preveri scan kodo -> gor
			JUMP Z, moveup
			
			COMPARE sC, 23		; prever scan kodo -> desno
			JUMP Z, moveright
			

movedown:	COMPARE s3, 1D		
			JUMP Z, start
			ADD s3, 01
			STORE s3, 00
			JUMP endcase			

moveleft:	COMPARE s4, 27 ;00
			JUMP Z, start
			ADD s4, 01			
			STORE s4, 01
			JUMP endcase

moveup:		COMPARE s3, 00
			JUMP Z, start
			SUB s3, 01
			STORE s3, 00
			JUMP endcase

moveright:	COMPARE s4, 00 ; 27
			JUMP Z, start
			SUB s4, 01
			STORE s4, 01
endcase:	LOAD sA, s5
			LOAD s8, 00
turn_on:	FETCH s3, (s8)
			ADD s8, 01
			FETCH s4,(s8)
			ADD s8, 01
			
			
			LOAD s6, 02			; vrednost binarna 10 za barvo kace
			
			OUTPUT s3, 00
			OUTPUT s4, 01
			OUTPUT s6, 02
			
			SUB sA, 01
			COMPARE sA, 00
			JUMP NZ, turn_on
			
			LOAD s6, 01			; popravi vrednost s6
			
			;JUMP Z, fast
			CALL delay_500us	
			CALL delay_500us
			CALL delay_500us
			CALL delay_500us
			CALL delay_500us
			CALL delay_500us
			CALL delay_500us
			CALL delay_500us
			CALL delay_500us
			CALL delay_500us
			
	fast:		JUMP main
			
lfsr:			LOAD sB, sE
				AND sB, 01
				COMPARE sB, 00
				JUMP Z, zero1
				JUMP one1
	rotate1:	RR sE
				LOAD sA, sE
				AND sA, 1F
				COMPARE sA, 1D
				JUMP C, row
				LOAD sE, 15      ;sA 1C
	row:		OUTPUT sE, 00	 ;sA
				LOAD sB, sF
				AND sB, 01
				COMPARE sB, 00
				JUMP Z, zero2
				JUMP one2
	rotate2:	RR sF
				LOAD sA, sF
				AND sA, 3F
				COMPARE sA, 28
				JUMP C, col
				LOAD sF, 15		; sA 27
	col:		OUTPUT sF, 01	; sA			
				OUTPUT s6, 02
				RETURN
	
	zero1:	XOR sE, 00
			JUMP rotate1
	one1: 	XOR sE, C1
			JUMP rotate1
	zero2:	XOR sF, 00
			JUMP rotate2
	one2: 	XOR sF, C1
			JUMP rotate2
	
			

isr:		
			INPUT sA, 03
			COMPARE sC, 1D
			JUMP Z, chck1C
	chck1B:	COMPARE sA, 1B
			JUMP Z, goodsc
			COMPARE sC, 23
			JUMP Z, chck1D
	chck1C:	COMPARE sA, 1C
			JUMP Z, goodsc
			COMPARE sC, 1B
			JUMP Z, chck23
	chck1D:	COMPARE sA, 1D
			JUMP Z, goodsc
			COMPARE sC, 1C
			JUMP Z, badsc
	chck23:	COMPARE sA, 23
			JUMP Z, goodsc
			JUMP badsc
	goodsc:	LOAD sC, sA
			;LOAD sC, 1D
	badsc:	RETURNI ENABLE 


clear:		LOAD s4, 28
	loop1:	LOAD s3,1E
			SUB s4, 01
		loop2:	SUB s3, 01
				OUTPUT s3, 00
				OUTPUT s4, 01
				OUTPUT s7, 02
				COMPARE s3, 00
				JUMP NZ, loop2
			
			COMPARE s4, 00
			JUMP NZ, loop1
			OUTPUT s6, 04
			RETURN
	
delay_1us: 
	LOAD s0, delay_1us_constant
wait_1us: 
	SUB s0, 01
	JUMP NZ, wait_1us
	RETURN
	
delay_500us:
	LOAD s2, F0
	LOAD s1, BD
wait_500us: 
	CALL delay_1us
	SUB s1, 01
	SUBCY s2, 00
	JUMP NC, wait_500us
	RETURN
			
			
            ADDRESS      3FF     ; prekinitveno s5rvisna rutina s5 nahaja na zadnjem
								 ;naslovu v romu (3FF)
			JUMP      isr        ; isr = interrupt s5rvice routine
